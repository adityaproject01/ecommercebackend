signup
    post http://localhost:5000/api/auth/signup
    {
        "name": "adityam",
        "email": "adityam@gmail.com",
        "password": "123456",
        "role": "customer"
    }
    Content-Type:application/json

Login
    post http://localhost:5000/api/auth/login
    {
        "email": "aditya@gmail.com",
        "password": "123456"
    }
    Content-Type:application/json

profile
    put http://localhost:5000/api/profile
    {
        "name": "Aditya Secure",
        "password": "superstrongpass"
    }
    Authorization:token

product Add
    a)post http://localhost:5000/api/products/add
    {
        "name": "puma",
        "description": "puma black",
        "price": 79999,
        "category": "shoes",
        "image_url": "https://example.com/image.jpg"
    }
    Authorization
    g)get http://localhost:5000/api/products/my-products seller
    b)get http://localhost:5000/api/products?search=shoes
    c)Delete http://localhost:5000/api/products/1
    Authorization
    GET /products → all products
    GET /products?search=shoes → search products with "shoes" in name or category
    GET /products?sortBy=price&sortOrder=desc → sort by price descending
    GET /products?page=2&limit=5 → pagination (page 2 with 5 items per page)

Cart 
    a)Add 
    post http://localhost:5000/api/cart/add
    {
        "product_id": 3,
        "quantity": 2
    }
    Authorization
    
    b)get http://localhost:5000/api/cart
    Authorization

    c)put http://localhost:5000/api/cart/update/2
    { "quantity":2 }
    Authorization

    d)Delete http://localhost:5000/api/cart/remove/2
    Authorization

order
    a)post http://localhost:5000/api/order/place
    Authorization
    b)get http://localhost:5000/api/order/admin
    Authorization
    c)Admin:GET http://localhost:5000/api/order/admin
    Header: Authorization: Bearer <admin-token>
    d)Customer:GET http://localhost:5000/api/order/my
    Header: Authorization: Bearer <customer-token>
    e)Seller:GET http://localhost:5000/api/order/seller
    Header: Authorization: Bearer <seller-token>
category
  get http://localhost:5000/api/category
  empty
  POST http://localhost:5000/api/category/add
  Authorization: Bearer <your_admin_jwt_token>
  Content-Type: application/json


sql
CREATE DATABASE ecommerce_db;
USE ecommerce_db;

users
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  role ENUM('customer', 'seller', 'admin') NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  category VARCHAR(100),
  image_url VARCHAR(255),
  seller_id INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (seller_id) REFERENCES users(id) ON DELETE CASCADE
);
USE ecommerce_db;

CREATE TABLE cart (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT DEFAULT 1,
  added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);


CREATE TABLE orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  total DECIMAL(10,2),
  status VARCHAR(50) DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE order_items (
  id INT AUTO_INCREMENT PRIMARY KEY,
  order_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT,
  price DECIMAL(10,2),
  FOREIGN KEY (order_id) REFERENCES orders(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE categories (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) UNIQUE NOT NULL
);

DB_HOST=localhost
DB_USER=root
DB_PASSWORD=Project
DB_NAME=ecommerce_db
DB_PORT=3306
JWT_SECRET=myjwtsecretkey123
JWT_EXPIRES_IN=1d

cat and product delete auto
ALTER TABLE cart
DROP FOREIGN KEY cart_ibfk_2;

ALTER TABLE cart
ADD CONSTRAINT cart_ibfk_2
FOREIGN KEY (product_id) REFERENCES products(id)
ON DELETE CASCADE;

CREATE TABLE subcategories (
  id INT AUTO_INCREMENT PRIMARY KEY,
  category_id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  image_url VARCHAR(255),
  FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
);



CREATE DATABASE ecommerce_db;
USE ecommerce_db;

address Table:
CREATE TABLE address (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    full_name VARCHAR(255),
    phone VARCHAR(15),
    address_line1 TEXT NOT NULL,
    address_line2 TEXT,
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(10),
    country VARCHAR(100)
);
addresses Table:



CREATE TABLE addresses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    address_line TEXT NOT NULL,
    city VARCHAR(100),
    state VARCHAR(100),
    pincode VARCHAR(10)
);
cart Table:



CREATE TABLE cart (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT DEFAULT 1,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
categories Table:



CREATE TABLE categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    image_url VARCHAR(255)
);
order_items Table:



CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);
orders Table:



CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    address_id INT,
    total DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_mode VARCHAR(20) DEFAULT 'COD',
    status VARCHAR(50) DEFAULT 'pending'
);
products Table:



CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    category_id INT,
    image_url VARCHAR(255),
    seller_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
subcategories Table:



CREATE TABLE subcategories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category_id INT NOT NULL,
    image_url VARCHAR(255)
);
users Table:



CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('customer', 'seller', 'admin') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sub_subcategories (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  subcategory_id INT NOT NULL,  -- Foreign key reference to the subcategory table
  image_url VARCHAR(255),
  FOREIGN KEY (subcategory_id) REFERENCES subcategories(id) ON DELETE CASCADE
);

CREATE TABLE sub_sub_subcategories (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  sub_subcategory_id INT NOT NULL,  -- Foreign key reference to the sub_subcategories table
  image_url VARCHAR(255),
  FOREIGN KEY (sub_subcategory_id) REFERENCES sub_subcategories(id) ON DELETE CASCADE
);


ALTER TABLE products ADD COLUMN sub_sub_subcategory_id INT;


ALTER TABLE products 
ADD CONSTRAINT fk_sub_sub_subcategory
FOREIGN KEY (sub_sub_subcategory_id) REFERENCES sub_sub_subcategories(id)
ON DELETE SET NULL;


ALTER TABLE addresses ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE cart ADD CONSTRAINT fk_cart_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE cart ADD CONSTRAINT fk_cart_product_id FOREIGN KEY (product_id) REFERENCES products(id);
ALTER TABLE order_items ADD CONSTRAINT fk_order_items_order_id FOREIGN KEY (order_id) REFERENCES orders(id);
ALTER TABLE order_items ADD CONSTRAINT fk_order_items_product_id FOREIGN KEY (product_id) REFERENCES products(id);
ALTER TABLE orders ADD CONSTRAINT fk_orders_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE orders ADD CONSTRAINT fk_orders_address_id FOREIGN KEY (address_id) REFERENCES address(id);
ALTER TABLE products ADD CONSTRAINT fk_products_category_id FOREIGN KEY (category_id) REFERENCES categories(id);
ALTER TABLE products ADD CONSTRAINT fk_products_seller_id FOREIGN KEY (seller_id) REFERENCES users(id);
ALTER TABLE subcategories ADD CONSTRAINT fk_subcategories_category_id FOREIGN KEY (category_id) REFERENCES categories(id);
ALTER TABLE sub_subcategories ADD CONSTRAINT fk_sub_subcategories_subcategory_id FOREIGN KEY (subcategory_id) REFERENCES subcategories(id) ON DELETE CASCADE;
ALTER TABLE sub_sub_subcategories ADD CONSTRAINT fk_sub_sub_subcategories_sub_subcategory_id FOREIGN KEY (sub_subcategory_id) REFERENCES sub_subcategories(id) ON DELETE CASCADE;
